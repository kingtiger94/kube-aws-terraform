#cloud-config
coreos:
  etcd2:
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380
  update:
    reboot-strategy: etcd
  locksmith:
    group: etcd
  units:
    - name: locksmithd.service
      command: start
      drop-ins:
      - name: 30-cloudinit.conf
        content: |
          [Service]
          Environment=LOCKSMITHD_REBOOT_WINDOW_START=05:30
          Environment=LOCKSMITHD_REBOOT_WINDOW_LENGTH=3h
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-etcd-peers.conf
          content: |
              [Service]
              EnvironmentFile=/etc/sysconfig/etcd-peers
    - name: etcd-init.service
      command: start
      content: |
        [Unit]
        Description=etcd init
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/environment
        TimeoutStartSec=10min
        ExecStart=/opt/bin/etcd-init.sh
        [Install]
        WantedBy=multi-user.target
    - name: vault.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=vault
        Wants=docker.service
        After=docker.service
        [Service]
        # Install vault binary
        ExecStartPre=/bin/bash -c "docker run --rm -v /opt/bin:/tmp vault:${VAULT_RELEASE} cp /bin/vault /tmp/vault"
        # Download vault config and generate cert
        ExecStartPre=/bin/bash -c "/opt/bin/s3sync.sh"
        EnvironmentFile=/etc/environment
        EnvironmentFile=/opt/etc/vault/envvars
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull $VAULT_IMAGE
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n --cap-add=IPC_LOCK \
              -p 127.0.0.1:8200:8201 -p $COREOS_PRIVATE_IPV4:8200:8200 \
              -v /var/log/vault:/vault/logs \
              -v /opt/etc/vault:/vault/config \
              $VAULT_IMAGE server "
        ExecStartPost=/usr/bin/sh -c ". /etc/profile.d/vault.sh; \
          if [ $VAULT_AUTO_UNSEAL = 'true' ]; then /opt/etc/vault/scripts/init-unseal.sh; fi "
        RestartSec=20
        Restart=always

    - name: vault-audit.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Enable vault audit
        Wants=vault.service
        After=vault.service
        [Service]
        TimeoutStartSec=0
        ExecStartPre=/bin/bash -c "if [ ! -f /root/.vault-token ]; then /opt/etc/vault/scripts/s3get.sh ${AWS_ACCOUNT}-${CLUSTER_NAME}-vault-s3-backend root-token/root-token /root/.vault-token; fi "
        ExecStart=/usr/bin/sh -c "source /etc/profile.d/vault.sh; \
          if ! vault audit-list | grep -q  ^file/; then vault audit-enable file path=/vault/logs/vault_audit.log; fi "
        RestartSec=20
        Restart=always

    - name: create-kube-ca.service
      command: start
      content: |
        [Unit]
        Description=Create Kube CA
        Wants=vault.service
        After=vault.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/environment
        ExecStart=/opt/bin/s3sync.sh
        ExecStart=/usr/bin/sh -c "/opt/etc/vault/scripts/create_kube_ca.sh ${CLUSTER_NAME}"

write_files:
  - path: /etc/profile.d/alias.sh
    permissions: 0755
    owner: root
    content: |
      role=$(curl 169.254.169.254/latest/meta-data/iam/info -s | \
              jq --raw-output '.InstanceProfileArn' | sed 's%.*instance-profile/%%')
      PS1="\[\033[01;32m\]\u@\h\[\033[01;34m\]-\$role \w \$\[\033[00m\] "
  - path: /opt/bin/etcd-init.sh
    permissions: 0700
    owner: root
    content: |
      #!/bin/bash
      # dyamically create/join the etcd cluster by querying autoscaling group
      # see https://github.com/dockerage/etcd-aws-cluster
      image=dockerage/etcd-aws-cluster
      /usr/bin/docker run -v /etc/sysconfig/:/etc/sysconfig/ $image

  - path: /opt/bin/s3sync.sh
    permissions: 0755
    owner: root
    content: |
        #!/bin/bash
        # Sync files from s3 bucket
        AWS_CONFIG_ENV=/root/.aws/envvars
        [[ ! -f $AWS_CONFIG_ENV ]] && echo "$AWS_CONFIG_ENV doesn't exit." && exit 0
        IMAGE=suet/awscli:latest
        s3command="aws s3 sync --exact-timestamps $source $destination"
        source="s3://${AWS_ACCOUNT}-${CLUSTER_NAME}-config/artifacts/${MODULE_NAME}/upload"
        destination=/root/s3sync
        command=setup.sh
        docker run --rm -v $destination:$destination --env-file=$AWS_CONFIG_ENV $IMAGE /bin/bash -c "$s3command"
        tarballs=$(ls -1 $destination/*.tar.gz $destination/*.tar 2> /dev/null)
        if [ -s "$tarballs" ]; then
          tar zxvf $tarballs -C $destination
          if [ -s "$command" ]; then
            bash $command
          fi
        fi

  - path: /etc/aws/account.envvars
    permissions: 0644
    owner: root
    content: |
        AWS_ACCOUNT=${AWS_ACCOUNT}
        AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        CLUSTER_NAME=${CLUSTER_NAME}

  - path: /root/.aws/envvars
    permissions: 0600
    owner: root
    content: |
        AWS_ACCOUNT=${AWS_ACCOUNT}
        AWS_USER=${AWS_USER}
        AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}

  - path: /root/.aws/config
    permissions: 0600
    owner: root
    content: |
        [default]
        aws_access_key_id=${AWS_ACCESS_KEY_ID}
        aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
        region=${AWS_DEFAULT_REGION}
